
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.20.0
 * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
 */
Prisma.prismaVersion = {
  client: "5.20.0",
  engine: "06fc58a368dc7be9fbbbe894adf8d445d208c284"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password_hash: 'password_hash',
  name: 'name',
  role: 'role',
  isActive: 'isActive',
  last_login: 'last_login',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  departmentId: 'departmentId',
  positionId: 'positionId',
  surname: 'surname'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  address: 'address',
  phone: 'phone',
  birthDate: 'birthDate',
  document: 'document',
  emergencyContact: 'emergencyContact',
  avatar: 'avatar',
  bio: 'bio',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  user_id: 'user_id'
};

exports.Prisma.PositionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  salary: 'salary',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  managerId: 'managerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PerformanceEvaluationScalarFieldEnum = {
  id: 'id',
  period: 'period',
  score: 'score',
  goals: 'goals',
  achievements: 'achievements',
  feedback: 'feedback',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  evaluator_id: 'evaluator_id',
  user_id: 'user_id'
};

exports.Prisma.AdmissionScalarFieldEnum = {
  id: 'id',
  hireDate: 'hireDate',
  contractType: 'contractType',
  salary: 'salary',
  benefits: 'benefits',
  terminationDate: 'terminationDate',
  terminationReason: 'terminationReason',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  user_id: 'user_id',
  position_id: 'position_id',
  department_id: 'department_id'
};

exports.Prisma.AdmissionDocumentScalarFieldEnum = {
  id: 'id',
  admissionId: 'admissionId',
  fileName: 'fileName',
  fileType: 'fileType',
  fileSize: 'fileSize',
  filePath: 'filePath',
  uploadedAt: 'uploadedAt',
  uploadedBy: 'uploadedBy'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  userId: 'userId',
  groupId: 'groupId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  trainingId: 'trainingId'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportDocumentScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  fileName: 'fileName',
  fileType: 'fileType',
  fileSize: 'fileSize',
  filePath: 'filePath',
  uploaded_at: 'uploaded_at',
  uploaded_by: 'uploaded_by'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  receiverId: 'receiverId',
  message: 'message',
  timestamp: 'timestamp',
  isBot: 'isBot',
  isRead: 'isRead',
  messageType: 'messageType',
  sender_id: 'sender_id'
};

exports.Prisma.TrainingScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  maxParticipants: 'maxParticipants',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  progress: 'progress',
  instructorId: 'instructorId'
};

exports.Prisma.UserTrainingScalarFieldEnum = {
  id: 'id',
  enrolledAt: 'enrolledAt',
  completedAt: 'completedAt',
  status: 'status',
  score: 'score',
  certificate: 'certificate',
  training_id: 'training_id',
  user_id: 'user_id',
  progress: 'progress'
};

exports.Prisma.TrainingDocumentScalarFieldEnum = {
  id: 'id',
  userTrainingId: 'userTrainingId',
  fileName: 'fileName',
  fileType: 'fileType',
  fileSize: 'fileSize',
  filePath: 'filePath',
  uploadedAt: 'uploadedAt',
  uploadedBy: 'uploadedBy'
};

exports.Prisma.SupporterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  address: 'address',
  cep: 'cep',
  mapping: 'mapping',
  supportType: 'supportType',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lat: 'lat',
  lng: 'lng'
};

exports.Prisma.ReportsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  generated_by: 'generated_by',
  frequency: 'frequency',
  scheduledDate: 'scheduledDate',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Profile: 'Profile',
  Position: 'Position',
  Department: 'Department',
  PerformanceEvaluation: 'PerformanceEvaluation',
  Admission: 'Admission',
  AdmissionDocument: 'AdmissionDocument',
  Task: 'Task',
  Group: 'Group',
  ReportDocument: 'ReportDocument',
  Setting: 'Setting',
  ChatMessage: 'ChatMessage',
  Training: 'Training',
  UserTraining: 'UserTraining',
  TrainingDocument: 'TrainingDocument',
  Supporter: 'Supporter',
  reports: 'reports'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
